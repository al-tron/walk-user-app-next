generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                String         @id
  email             String         @unique
  isEmailVerified   Boolean
  name              String
  givenName         String
  familyName        String
  profilePictureUrl String
  createdAt         DateTime       @default(now()) @db.Timestamptz()
  updatedAt         DateTime       @updatedAt @db.Timestamptz()
  deletedAt         DateTime?      @db.Timestamptz()
  bags              Bags[]
  oauthAccount      OauthAccount[]
  sessions          Session[]
}

model OauthAccount {
  id             String       @id
  userId         String
  providerUserId String
  provider       ProviderEnum
  accessToken    String
  refreshToken   String?
  expiresAt      DateTime     @db.Timestamptz()
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerUserId, provider])
}

enum ProviderEnum {
  GOOGLE
  APPLE
  STRAVA
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime @db.Timestamptz()
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Baggables {
  id            Int             @id
  name          String
  slug          String
  height        Int
  drop          Int
  latitude      Float
  longitude     Float
  bags          Bags[]
  baggableTypes BaggableTypes[]
}

model BaggableTypes {
  id        Int         @id
  type      String      @unique
  baggables Baggables[]
}

model Bags {
  id          String    @id
  userId      String
  baggablesId Int
  baggedAt    DateTime  @db.Timestamptz()
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Baggable    Baggables @relation(fields: [baggablesId], references: [id], onDelete: Cascade)
}
